<!doctype html>
<html>
    <head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		<title>FP Programmers</title>
		<link rel="shortcut icon" href="icon.png"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
		<meta name="apple-mobile-web-app-capable" content="yes" />
		<link rel="apple-touch-icon" href="icon.png"/>
		<link rel="stylesheet" href="style.css" />
		<script src="jquery-1.9.1.min.js"></script>
		<script src="urlize.js"></script>
		<script src="rohbot.api.js"></script>
		
		<script>
			var storage;
			try {
				var uid = new Date;
				(storage = window.localStorage).setItem(uid, uid);
				var fail = storage.getItem(uid) != uid;
				storage.removeItem(uid);
				fail && (storage = false);
			} catch(e) { storage = false; }
			
			var requestedHistory;
			var oldestMessage;
			
			var rohbot = null;
			function initializeRohBot() {
				var serverUri = "wss://fpp.literallybrian.com/ws/";
				if (window.location.search == "?noproxy")
					serverUri = "ws://fpp.literallybrian.com:12000/"; // ws://209.141.59.194:12000/
				
				rohbot = new RohBot(serverUri); 
				rohbot.onConnected = function() {
					oldestMessage = 0x3FFFFFFFFFFFFFF;
					requestedHistory = false;
				};
				
				rohbot.onLogin = function() {
					if (id != "0") {
						$("#header").hide();
						$("#messageBox").removeAttr("disabled");
						$("#messageBox").val("");
					} else {
						$("#header").show();
						$("#messageBox").attr("disabled","disabled");
						$("#messageBox").val("Guests can not speak.");
					}
					
					$("#chat").scrollTop($("#chat")[0].scrollHeight);
				};
				
				rohbot.onChatHistory = function(data) {
					if (!data.Requested) {
						$("#chat").html("");
						for (var i = 0; i < data.Lines.length; i++) {
							addRohBotMessage(data.Lines[i], data.Requested);
						}
					} else {
						var firstMsg = $("#chat :first");
						
						for (var i = data.Lines.length - 1; i >= 0; i--) {
							addRohBotMessage(data.Lines[i], data.Requested);
						}
						
						$("#chat").scrollTop(firstMsg.offset().top - $("#header").height() - 16);
						requestedHistory = false;
					}
					
					oldestMessage = data.OldestLine;
				};
				
				rohbot.onMessage = function(line) {
					addRohBotMessage(line, false);
				};
				
				rohbot.onSysMessage = function(line) {
					line.Type = "state";
					addRohBotMessage(line, false);
				};
				
				rohbot.onUserList = function(users) {
					addMessage(0, "*", "Currently in Chat:");
					var html = '<div class="userList">';
					for (var i = 0; i < users.length; i++) {
						var user = users[i];
						
						if (user.Name == "Guest")
							continue;
							
						if (user.Avatar == "0000000000000000000000000000000000000000")
							user.Avatar = "fef49e7fa7e1997310d705b2a6158ff8dc1cdfeb";
						
						html += '<div class="ulUser">';
						var inGame = user.Playing != "";
						var game = user.Playing != "" ? "In-Game: " + user.Playing : "&nbsp;";
						var avatarUrl = "/steamcommunity/public/images/avatars/" + user.Avatar.substring(0, 2) + "/" + user.Avatar + "_full.jpg";
						if (user.Avatar == "") avatarUrl = "rohbot.png";
						if (user.Web) user.Name = '<span class="webIcon">@&nbsp;</span>' + user.Name;
						html += '<img class="ulAvatar" src="' + avatarUrl + '"/>';
						html += '<div class="ulName" data-color="' + (inGame ? "ingame" : "") + '" data-rank="' + user.Rank + '">' + user.Name + '<br/>' + game + '</div>';
						html += '</div>';
					}
					
					html += '</div/>';
					addHtml(html, false);
				};
				
				rohbot.connect();
			}
			
			function addRohBotMessage(line, oldLine) {
				switch (line.Type) {
					case "chat": {
						var sender = line.Sender;
						if (userType == "RohBot")
							sender = '<span class="rohBot">' + sender + '</span>';
						else if (inGame)
							sender = '<span class="inGame">' + sender + '</span>';
						
						var html = '<div><span class="sender">' + formatTime(line.Date) + ' - ' + sender + '</span>' + linkify(line.Content) + '</div>';
						addHtml(html, oldLine);
						break;
					}
					
					case "state": {
						var html = '<div><span class="sender">' + formatTime(line.Date) + ' - </span>' + line.Content + '</div>';
						addHtml(html, oldLine);
						break;
					}
					
					case "whisper": {
						line.Type = "chat";
						if (line.Sender === rohbot.name)
							line.Sender = "To " + line.Receiver;
						else
							line.Sender = "From " + line.Sender;
						addRohBotMessage(line, oldLine);
						break;
					}
				}
			};
			
			function addHtml(html, old) {
				var elem = $("#chat");
				var atBottom = (elem[0].scrollHeight - elem.scrollTop() == elem.outerHeight());
				
				if (!old)
					$("#chat").append(html);
				else
					$("#chat").prepend(html);
					
				if (!old && atBottom)
					elem.scrollTop(elem[0].scrollHeight);
			}
			
			function formatTime(date) {
				date = new Date(date * 1000);
				var suffix = "";
				var hour = date.getHours();
				
				if (hour < 12)
					suffix = "AM";
				else
					suffix = "PM";
				
				if (hour == 0)
					hour = 12;
				if (hour > 12)
					hour = hour - 12;
					
				var min = date.getMinutes();
				if (min.toString().length == 1)
					min = "0" + min;
					
				return hour + ":" + min + " " + suffix;
			}
			
			function linkify(str) {
				str = urlize(str, { target: '_blank' }).replace(/\n/g, '<br/>');
				var res = $("<div/>");
				var e = $("<div/>");
				e.html(str).contents().each(function (i, elem) {
					if (elem.nodeType == 3) {
						res.append(htmlEncode(elem.textContent).replace(/ /g, "&nbsp;").replace(/ː(.+?)ː/img, '<img src="/economy/emoticon/$1"/>'));
					} else {
						res.append(elem);
					}
				});
				return res.html();
			}
			
			function htmlEncode(value) {
				return $('<div/>').text(value).html();
			}
			
			$(document).ready(function () {
				initializeRohBot();
				
				$("#send").click(function () {
					var msg = $("#messageBox").val();
					var msgL = msg.toLowerCase();
					
					if (msg.length == 0)
						return;
					
					if (msgL.substring(0, 6) == "/clear" || msgL.substring(0, 6) == "~clear") {
						$("#chat").html("");
						$("#messageBox").val("");
						return;
					}
					
					rohbot.sendMessage(msg);
					$("#messageBox").val("");
				});
				
				// http://stackoverflow.com/a/3533099/1056845
				$("#messageBox").keydown(function (e) {
					if (e.keyCode == 13) {
						if (e.ctrlKey) {
							var val = this.value;
							if (typeof this.selectionStart == "number" && typeof this.selectionEnd == "number") {
								var start = this.selectionStart;
								this.value = val.slice(0, start) + "\n" + val.slice(this.selectionEnd);
								this.selectionStart = this.selectionEnd = start + 1;
							} else if (document.selection && document.selection.createRange) {
								this.focus();
								var range = document.selection.createRange();
								range.text = "\r\n";
								range.collapse(false);
								range.select();
							}
						} else {
							$("#messageBox").blur().focus();
							$("#send").click();
						}
						return false;
					}
				});
				
				$("#chat").scroll(function () {
					if ($("#chat").scrollTop() == 0 && !requestedHistory) {
						rohbot.requestHistory(oldestMessage);
						requestedHistory = true;
					}
				});
				
				$(window).resize(function () {
					$("#chat").scrollTop($("#chat")[0].scrollHeight);
				});
			});
		</script>
    </head>
    <body>
		<div class="container">
			<div id="header">
				<h1>FP Programmers</h1>
				<a id="login">Login</a>
				<a id="login">Register</a>
			</div>
			<div id="chat"></div>
			<div id="footer">
				<input id="messageBox" type="text" placeholder="enter message ..." />
				<a id="send">Send</a>
			</div>
		</div>
    </body>
</html>